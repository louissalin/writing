---
layout: post
title: My Journey as a Software Developer - the real world
---
<title>{{ page.title }}</title>

(My story started "here, in part one":http://www.emoprog.com/2013/01/12/jouney.html. Go read it if you haven't!)

After getting out of college I got a job in a small shop that was reselling a 3D CAD software package and I spent about a year writing custom automation scripts for a customer of ours. We soon realized that most of what we did for our clients coud be automated so a team was put together to write a plugin and an application for the platform. I must've spent a bit more than two years working on that and the project became my introduction to .Net, C# and the usage of databases as a storage medium. Very quickly, I started feeling that programming could be a frustrating and boring job, not the exciting hobby it used to be. I didn't know it back then, but when somebody is paying you to do a job, they have a certain set of expectations that needs to be met. I remember being yelled at because we had made a decision to completely revamp the core of our application. It was the right decision. Our old abstractions were simply not suitable anymore. However, our supervisor, who was not a programmer, was angry that we decided to take this three or four week detour. Honestly, none of us thought it would take more than a week and we didn't bother letting our supervisor know about this. 

Other frustrations came from constantly having to debate my ideas with a peer of mine. It was a constant struggle and it wore me down. I understand that this is a necessary evil and that the best ideas should rise to the top. Unfortunately for me, I hate this process and I think that most of the time people fight for their ideas simply because they want to see them used, not because of their merit. This is probably the single most frustrating thing in my day to day job, even today. 

I took a brief pause in my programming career to start a coffee shop, an experience that didn't end very well. The only technical thing I did was a website and a shopping cart in Ruby on Rails, a small web framework I had just discoverd online. I bougth the official Rails book and practically copied the code in the tutorial section to create the shopping cart. I also remember using AJAX and not quite understanding it and using one of Rails' crutches. It worked fine but I think I could've done better. 

We closed the coffee shop just six months after we opened and I went back to work in software development. I worked in the IT department of a manufacturing shop and my job mostly consisted of developing our intranet. The technologies used were classic ASP, IIS and Windows, programming in VB Script. We had no source control and most of our software's logic was in the database, something used for data storage. This was CRUD (create/read/update/delete) at it's finest. The database *was* the application. Our code simply took data from the database and transformed it into something that could be displayed on the screen. Or it would take the user's input from the screen and store it in the database. 

Programmers might argue about this style of software development, a style I did not like at all. To me, this was not software. I had gone to school and learned about algorithms, how operating systems work and about artificial intelligence. I didn't want to simply store and retrieve data. I was still young and I let that affect my motivation, professionalism and performance. And to be fair, I don't think I was a very good developer back then, so I started reading software development blogs. I realized that brute forcing code on everything I touched wasn't the best way to go. I knew there was something better out there and I started on a journey to know it all: DDD, BDD, open source libraries, design patterns, anything that helps build good software!

My next job took me to a proper software development company where software sales was the main source of revenue. They had processes and tools in place to develop software. What's more, they were doing all the things I wanted to learn! And learn I did. It's too bad, however, that I wasn't a good fit for them. I only stayed a bit over a year and I regret how it happened, but I had to leave. This experience was very valuable at a personal level and I think it planted the seed that is currently growing in me. It would take a little longer before it would start growing, though: I had to go through just one more company.

After I left, I started working with a company that also generated revenue from software sales. However, I thought it was a huge step back from where I had just worked. Although they had proper tooling for software development, the techniques they used were antiquated compared to my previous employer's. Open source libraries were frowned upon, the application logic was back in the database and chaos reigned. I left after just a year there. Once again, I had let my motivation go down and my performance suffered. But I knew where I wanted to go next.

During all these years, I was still learning on the side. Ever since building my online coffee shopping cart in Rails, I knew this is where I wanted to go and I kept learning ruby and Rails and creating little projects in my free time. I also explored other languages, like Haskell. I've always had a bias toward computers running Linux as well and used it on my laptop while my family was enjoying a Mac. It slowly became obvious to me that what I really enjoyed was to not be on a Windows computer. The problem with Windows is that programmers have to stay on the main path designed for them by Microsoft. On Linux, however, we are free to do whatever we want to do as demonstrated by the miriad of tools that we chain together to create software. The power to tweak, even if you don't take advantage of it, is incredibly seductive to some programmers and it was luring me in. 

I ended up getting my dream job. Well, it's dreamy enough! It took effort and perseverance, but most of all, I knew where I wanted to be. All these years on the job market and all the time I've spent exploring different technologies have given me a sense of direction that I tweak every now and then. Now I need to figure out how I want to evolve as someone who makes software for a living.
