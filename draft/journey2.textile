---
layout: post
title: My Journey as a Software Developer - the real world
---
<title>{{ page.title }}</title>

(this is the continuation of this previous post)

After getting out of college I got a job in a small shop that was reselling a 3D CAD software package and I spent about a year writing custom automation scripts for a customer of ours. We soon realized that most of what we did for our clients coud be automated, so a team was put together to write a plugin and an application for the platform. I must've spent a bit more than two years working on that. This was my introduction to .Net, C# and the usage of databases as a storage medium. Very quickly, I started feeling that programming could be a frustrating and boring job, not the exciting hobby it used to be. I didn't know it back then, but when somebody is paying to do a job, they have a certain set of expectations. I remember being yelled at because we (the programmers on the team) had made a decision to completely revamp the core of our application. It was the right decision because our old abstractions were simply not suitable anymore. However, our supervisor, who was not a programmer, was angry that we decided to take this three or four week detour. Honestly, none of us thought it would take more than a week and we didn't bother mentioning this work. This was frustrating.

Other frustrations came from constantly having to debate my ideas with a peer of mine. It was a constant struggle and it wore me down. I understand that this is a necessary evil and that the best ideas should rise to the top. Unfortunately for me, I hate this process and I think that most of the time, people argue for their ideas simply because they want to see them used, not because of their merit. This is probably the single most frustrating thing in my day to day job, even today. 

I eventually moved to the United States from Canada, getting re-united with my wife. Although this is an entirely other story altogether, this is important because I started working remotely for the first time in my life. A few months in, old employees departed and new ones came in and I failed to bond with them. It didn't take long before I felt I was working with strangers. As time went on, I drifted away until I finally quit just a few months later to open a coffee shop.

The coffee shop experience didn't go too well. The only technical thing I ended up doing was a website and a shopping cart in Ruby on Rails. I practically copied the code that was in the first edition of the Rails book and it just worked. I also remember using AJAX and not quite understanding it and using one of Rails' crutches. It worked fine but I think I could've done better. This was in the days where prototype was taking off. Anyway, we closed the coffee shop not even a year in and I went back to work in software development. I worked in the IT department of a manufacturing shop and my job mostly consisted of developing our intranet. The technologies used were classic ASP on top of the Windows stack. We had no source control, half the application logic in the database layer, and different software modules would communicate via the database. This was CRUD (create/read/update/delete) at it's finest. The database *was* the application. Our code simply took data from the database and transformed it into something that could be displayed on the screen. Or it would take the user's input from the screen and store it in the database.

I did not like that. To me, this was not software. I had gone to school and learned about algorithms, how operating systems work and about artificial intelligence. I didn't want to simply store and retrieve data. I was still young and I let that affect my motivation, professionalism and performance. And to be fair, I don't think I was a very good developer back then, so I started reading software development blogs. I realized that brute forcing code on everything I touched wasn't the best way to go. It was the way most developers I had worked with did things, but I became increasingly annoyed. I knew there was something better out there. I started on a journey to know it all. DDD, BDD, open source libraries, etc. All of it! 

My next job took me to an actual software development company with processes and tools in place to develop software. What's more, they were doing all the things I wanted to learn! And learn I did. It's too bad, however, that I wasn't a good fit for them. I only stayed a bit over a year and I regret how it happened, but I had to leave. This experience was very valuable at a personal level and I think it planted the seed that is currently growing in me. I would take a little longer before it would start growing, though. I had to go through one more company.

After I left, I started working with a company downtown who's main revenue came from software sales. However, I thought it was a huge step back from the company I had just left. Although they had proper tooling for software development, the techniques they used were antiquated compared to my previous employer's. Open source libraries were frowned upon, the application logic was back in the database and chaos reigned. I left just a year after starting. Once again, I had let my motivation go down and my performance suffered. But I knew where I wanted to go next.

During all these years, I was still learning on the side.
Got a break working on unix platforms and programming became fun again!

I'm swinging back to design and engineering, but don't want to go as far.
